generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Parent {
  id            Int             @id @default(autoincrement())
  name          String
  surname       String
  middleName    String?
  username      String          @unique
  password      String
  parentStudent ParentStudent[]
}

model Teacher {
  id         Int     @id @default(autoincrement())
  name       String
  surname    String
  middleName String?
  username   String  @unique
  password   String
  Grades     Grade[]
}

model Worker {
  id         Int     @id @default(autoincrement())
  name       String
  surname    String
  middleName String?
  username   String  @unique
  password   String
  role       Role    @default(WORKER)
}

model Grade {
  id         Int       @id @default(autoincrement())
  letter     String    @db.Char(1)
  number     Int
  breakIndex Int       @default(0)
  teacherId  Int       @unique
  teacher    Teacher   @relation(fields: [teacherId], references: [id])
  students   Student[]
}

model Student {
  id              Int               @id @default(autoincrement())
  name            String
  surname         String
  middleName      String?
  debt            Int               @default(0)
  parentStudent   ParentStudent[]
  grade           Grade?            @relation(fields: [gradeId], references: [id])
  gradeId         Int?
  preferences     Preference[]
  Orders          Order[]
  StudentPresence StudentPresence[]
}

model ParentStudent {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  parent    Parent  @relation(fields: [parentId], references: [id])
  parentId  Int
}

enum Role {
  WORKER
  ADMIN
}

model Dish {
  id          Int          @id @default(autoincrement())
  name        String
  imgURL      String
  price       Int
  proteins    Int
  carbs       Int
  fats        Int
  weightGrams Int
  ingredients String
  calories    Int
  isHidden    Boolean      @default(false)
  type        DishType
  preferences Preference[]
  Orders      Order[]
}

enum DishType {
  PRIMARY
  SIDE
  SECONDARY
  DRINK
  EXTRA
}

model Preference {
  id        Int      @id @default(autoincrement())
  isDefault Boolean  @default(false)
  dayOfWeek Int
  Dish      Dish     @relation(fields: [dishId], references: [id])
  dishId    Int
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?
}

model Order {
  id        Int      @id @default(autoincrement())
  date      DateTime
  cost      Int
  Dish      Dish?    @relation(fields: [dishId], references: [id])
  dishId    Int?
  Student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
}

model StudentPresence {
  id        Int      @id @default(autoincrement())
  date      DateTime
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
}
